Chapter 1. Introduction
=======================

.. note::

   수습제도는 장인으로의 숙련을 이루고자하는 영속적인 열정을 주입한다는 점에서 차이를 만든다.
   이것은 영속적인 학습에 대한 열망을 주입하고, 과정 속에서, 수습생이 위대한 개발자가 되도록 한다.

이 책은 소프트웨어 수습생들을 위해 쓰여졌다-소프트웨어 개발의 맛을 알고, 그것들 더 먼 곳까지 가져가고 싶어하는, 그러나 약간의 가이드가 필요한 수습생들.
당신이 일류의 컴퓨터 과학 프로그램의 학위를 받았거나, 혹은 당신이 스스로 깨우쳤거나, 당신은 이 너머에는 위대한 개발자들이 있다는 것을 알고, 당신은 그들이 가지고 있는 같은 숙련도를 얻기를 열망할 것이다. 이 책은 그런 당신을 위해 쓰여졌다-당신의 상사가 아닌, 당신의 팀장이 아닌, 당신의 교수가 아닌 당신. 그런 역할을 맡고 있는 사람들에게 추천할 수 있는 많은 책이 있으나, 이 책은 여행의 시작에 있는 사람들을 위한 책이다.

이 책을 쓸 때에, 우리는 소프트웨어 장신정신의 이상과 규율에 큰 영향을 받았다.
따라서, 이 책의 제목 또한 그 사실을 반영하고 있다. 수습제도의 컨셉은 작은 팀들의 연습생들이 함께 일하고, 미숙한 수습생들이 장인과과 마스터들을 보조하던 중세의 장인 모델에 기초한다. 우리의 목표 중 하나는 소프트웨어를 만들기를 사랑하는 사람들에게 영감을 주어 그들을 공예에 집중하도록 하는 것이다.

여행은 "Hello world!"로 시작하지만 어디에서 끝나는가? 너무 많이도 이 과정은 중간 관리직으로의 승진으로 끝난다.
**너무 많은 재능있는 사람들이 생각없이 그 승진을 받아들이고, 수-년 후에 일자리가 즐겁지 않고, 은퇴만을 갈망한다.**
하지만 소프트웨어 개발에 재능이 있고, 배우는 과정을 즐기는 사람들에게, 소프트웨어 개발은 영속적인 커리어이고, 위대한 여행이 될 수 있다.

그러나, 그 여행이 시작되기 전에, 우리는 Dave의 이야기를 듣고, 약간의 정의를 전달할 것이다.
그의 이야기는 소프트웨어 개발자로서의 당신의 개인적인 성장에서 수습제도 패턴이 강력한 힘으로 합쳐질 수 있는지의 한 사례를 보여준다.
다른 한편에서 이 정의들은 소프트웨어 장인정신에 근거가 되는 생각들을 한 곳에 모아 그에 대한 흔한 질문들에 대답을 하기 위한 시도이기도 하다.

DAVE's Story (수습제도 패턴들을 조금 가미하여 말하는 이야기)
------------------------------------------------------------
   나의 첫 언어는 *Perl* 이었는데, 그것은 고작 두 번의 프로그래밍 학습 실패 이후의 것이었다.
   내가 12살 이었을 때, *Tron*\이라는 영화를 보고 전 세계가 나의 컴퓨터 안에 있다는 생각에 영감을 받아 나는 *BASIC*\을 내 *APPLE IIe*\에서 학습하려고 했다.
   하지만 나는 언어로 어떻게 의미있는 무언가를 할 수 있는지 몰랐다.
   내가 텍스트 기반 게임 외에는 어떤 것도 만들 수 없을 거라는 사실을 때, 결국 난 그만두었다.
   그리고 내가 25살 이었을 때, 나는 *Dummies*\책을 따라 천천히 연습을 따라가고, 작은 기능의 자바 어플리케이션들을 만들면서 스스로 자바를 배우려고 했다.
   나는 그저 바보같은 기분만에 감싸인 채로 마무리하고, 관두게 되었다.
   왜냐하면, 모든 것이 어렵게 보였기 때문이다.
   그것은 내가 26살일 때 까지만의 것이고, 첫 언어에 멈추었던, 두 명의 멘토를 만난 시기 이전의 것이다.
   *Irv Shapiro*\는(그는 나를 온라인 내용 편집자로 고용하였다.) 내가 프로그래머가 되고 싶어 한다는 것을 알아채고, 내게 *Perl*\을 배우도록 권유했다.
   그는 내 책상에 *Programming Perl(http://oreilly.com/catalog/978059600271/)*\책을 던져놓고, 내가 학습용으로 만들 수 있는 장난감을 설명해 주었다.
   비록 그 책은 나 같은 뉴비에게는 조금 버거운 것 이었으나, 며칠 동안 시간을 들여 전부 읽었다.
   바로 이어서 나는 내 독서 리스트에서 좀 더 소화하기 쉬웠던, *Visual Quickstart Guide* 따라가기 시작했다.
   나의 다른 멘토는 CTO이며 내 옆에 앉아 나와 팔꿈치를 자주 비볐었던*Steve Bunes*\이었는데, 나에게 지금도 쓰고 있는 강력한 디버깅 툴을 알려주었다.
   적용하기 가장 힘들었던 패턴으로는, 첫번째 장난감의 완성버전을 경험있는 가까운 개발자 워크스페이스의 Perl프로그래머와 시스템관리자들에게 나의 무식함을 드러내는 것이었다.
   하지만 이것은 나의 자존심을 삼킬만한 가치가 있었던 것이었는데, 왜냐하면 그들이 나에게 shebangs와 Unix file permissions에 빠른 팁을 주어 내가 빠르게 장난감을 완성하고, *Irv*\와 *Steve*\의 양말을 벗을 수 있게 해주었다.

   2년 후에, 나는 *Perl*\을 넘어서 새로운 스킬들을 쥘 수 있는 커리어를 찾고 있었다. 나는 나의 주파수를 당시에 악명높은 XP와 agile development로 넓혔다.
   나는 근처의 국제연설회에서 소방호스에서 부터 새로운 정보를 잔뜩 마셔가며 며칠을 지냈다.
   명연사들의 말을 듣고 만나가는 것은 차고 넘치는 경험이었고, 나는 학회를 벗어나서는 공식적으로 객체지향과 XP의 지지자가 되었다.
   *Joushua Kerievsky*\는 당시 *Refactoring to Patterns*\를 하고 있었는데 꽤 인상적이었고, 나와 같이 스터디하는 친척으로 발견하게 되었다.
   우리는 우리가 우리를 앞서가고 있다는 것을 곧 알게 되었는데, 왜냐하면 나는 리팩토링이나 패턴의 의미조차 알지 못했기 때문이다.
   그래서 내 경험에 맞는 책을 찾게 되었고 그것은, *Object-Oriented Osftware Construction*\과 *A Pattern Language*\였다.
   나는 여전히 *Refactoring to Patterns*\로 언젠가 다시 돌아가고 싶어서 나의 독서목록에 추가해놓았다.

   나는 2002년에 *Ruby*\를 배우기 시작했는데, *Ruby on Rails*\가 등장하기 전까지는 그것을 직무에서 사용할 방법을 거의 찾지 못했다.
   2005년에 나는 Ruby를 다시 찾아 날마다 사용할 방법을 찾기 위해 노력했다.
   그것으로 나는 장난감을 만들고 있었는데, 내가 Perl programmer처럼 너무 많이 생각한다는 것을 알게 되었다.
   자신의 첫 언어에 능숙한 프로그래머에게는, 새로운 언어를 배울 때, 자신이 편한 방식과 규칙으로 돌아가는 것은 언제나 큰 유혹이다.
   Ruby는 우아함과 단순성으로 유명했는데, 내가 쓰고있는 코드는 못생기고 이상해 보여서 나는 뭔가 잘못하고 있다고 알아차렸다.
   나는 *white belt*\를 착용하여, 나의 *Perl*\전문성을 *Ruby*\문서로 끌어오기 위한 의식적인 결정을 하게 되었다.
   머지않아 나는 필요한 것을 찾았고, 나의 난해한 코드를 표준 호출로 refactored 했다.
   이 모든 새로운 정보를 기억에 남기기 위해, 나의 무지함을 내가 무엇을 배웠는지 기록해 웹사이트에 올려 남들에게 보이기로 했다.

