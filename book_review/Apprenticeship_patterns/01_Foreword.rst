Foreword
========

Ward Cunnigham
--------------

25년 전에 *Kent Beck*\과 나는 *Tektronix*\의 기술센터 카페테리아에서 'smalltalk-80에 대해 우리에게 부여된 권한에 영향을 줄 것이 세상에 무엇이 있을까?' 에 대해 고찰하고 있었다.

진실 따위는 접어두고, 나는 Kent에게 조언했다. "우리가 무엇인가 할 수 있다면, 이 지식으로 무엇을 해야하는가?"

"나는 사람들이 프로그래밍에 대해 생각하는 방식을 바꾸고 싶네.", 켄이 말했고 나는 동의했다.
우리는 모두 우리가 생각했던 것이 우리의 산업에 잘못된 방식으로 진행된 것을 바꾸고 싶었다.
그리고 놀랍게도, 우리는 해낸 것이다.

내가 카페테리아에서 사용했었던 그 장치-*\the "never mind reality" part*\-는 내 대학시절 지인이 조언할 때 사용한 것이고, 따라서 내가 처음 탐색했을 패턴이었다.
그는 내가 kent에게 사용하듯이 나에게 실험했다. 내가 패턴으로 인식하는 그 행동은, kent와 다소 대담하게 까지 모였던 멀리 떨어진 목표를 상상하게 만들었다.
그리고 한번 떠올려진 우리의 목표들은 더욱 얻을 수 있을만한 것으로 보여졌다.

나는 그 패턴을 *thought device*\이라고 불렀다. 왜냐하면 그것이 우리가 가끔 가졌던 문제*(어떤 야망을 감지하는 것)*\를 해결해 주었기 때문이다.
이 책은 폭넓은 문제들에 대해 비슷한 장치로만 가득찬 것이다.
우리는 해당 패턴들이 문제를 해결한다고 주장한다. *"Never mind reality"* 는 나와 Kent를 위해 문제를 해결해 주었다.
이것은 우리가 막혀있는 것에서 큰 생각을 가지도록 해주었고, 우리의 습관적인 개인적 판단, 검사방식을 넘어서게 해주었다.

이 책을 훑어보라. 당신은 많은 패턴들을 볼 수 있을 것이다. 많은 것들이 익숙한 것일 것이다.
당신 중 누군가는, "난 이미 그 패턴을 알고 있소.", 라고 말할 것이고, 아마 실제로도 그럴 것이다.
그러나 기재된 패턴이 당신을 도울 수 있는 방법은 비록 그 해결책이 흔한 것 일 때이어도 2가지가 있다. 

   1. 첫째, 적혀있는 패턴들은 더 완성된 것이다. 이것은 연구되고, 분류되고 설명된다.
   너는 패턴에서 예상치 못한 *nuggets(땅 아래의 금 덩어리, 동그란 음식)*\를 찾을 수 있을 것이다. 그것들을 맛보아라.
   그것들은 당신이 이미 알고 있는 패턴을 더욱 강력하게 해줄 것이다.

   #. 둘째, 패턴들은 연결되어 있는 것이다. 각각은 다른 것으로 서로를 이끈다.
   당신이 이미 알고 있는 한 가지를 찾았을 때, 당신은 이 연결을 따라 다른 패턴들을 탐색 할 수 있다.

Kent와 나는 Smalltalk-80를 패턴으로 채굴하였고, 우리는 많은 것들을 발견했다. 우리는 패턴의 컨셉을 우리의 동료들과 조율해 보았고, 작은 혁명을 시작했다.
우리는 사람들이 프로그래밍에 대해 생각하는 방식을 바꿨다. 수 많은 서적들이 패턴들에 대해서 사용법과 함께 쓰여졌다.

우리의 혁명은 거의 끝이 났다. 패턴 전문용어들의 점진적인 성장은 agile software development methods의 기반이 되었다.
많은 서적들이 동시에 등장했다.

그래서 왜 지금 이 책인가?
우리는 우리의 전문성을 자원으로 넘치게 채웠다. 거기엔 어떤 한명이 습득할 수 있는 것 이상으로 우리의 혁명에 관한 정보가 더 있다.
여전히, 일부의 사람들은 그것을 다루고 있다. 그들은 모든 조언들을 내재화하여, 언제나 손 가까이에 놓는다. 그들은 어떻게 그것을 숙련의(mastery) 레벨로 얻을수 있었을까? 

이 책은 우리의 복잡한 영역을 숙달하기 위한 패턴으로 가득 차있다. 숙달하는 것은 그저-아는 것 과는 다르다. **이것은 너의 짐을 덜어내는 아는 방법이다.**

예를 들어, 만약 당신이 ``SUBSTR`` function의 arguments의 순서를 기억하지 못한다면, 인터넷을 찾아복 수 있다.
인터넷에게 매우 감사합니다. 이것은 우리의 짐을 조금 덜어냈다.
그러나 만약 당신이 이 책의 패턴들을 사용한다면, 당신이 당신의 일을 언제나 개선 가능성이 있는 방식으로 접근할 때, 당신은 자신이 다른 종류의 코드를 쓰고 있는 것을 발견할 것이다.
   (그리고 그 코드는 ``SUBSTR``\의 arguments를 아는 것에 의존하지 않는다.)
당신은 ``SUBSTR``\를 뛰어넘는 프로그램들을 작성하게 될 것이다. 이것이 당신의 짐을 많이 덜어줄 것이다.

우리의 혁명으로부터 나온 모든 충고들은 그것이 당신에게 *Second Nature(자연스러운 법칙)*\이 되기 전까지 큰 도움이 되지 않을 것이다.
소프트웨어에서 *The craftsmanship(장인정신)*\의 움직임은 이것을 second nature로 만드는 것은 second nature은 아니라고 인식한다.
위 패턴들은 이 진행에 좋은 기여가 될 것이다.

