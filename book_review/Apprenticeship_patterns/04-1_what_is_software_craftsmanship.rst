What is Software Craftmanship?
==============================

기술, 장인정신, 수습, 장인, 마스터같은 단순한 용어의 사전적인 정의들은 이 책에서 우리의 필요에는 조금 모자라다.
그들은 가끔 순환적이고

   *(craft가 craftsman이 가진 기술을 의미하고, craftsman이라는 인물은 craftmanship.드러내는 사람을 의미하고, craftsmanship.craftsmen들이 전통적인 기술을 펼치는 데에 따르는 것을 말한다.)*

아주 드문 특정 나라의 길드 시스템의 역사에 기초한 것이며, 매우 기술적으로 건설된 보통의 것들을 설명하는데 일반화된 것이다.
짧게 말하면, 이러한 용어들은 특정가치를 배제하는 것은 하지않고 대부분의 것을 포함한다.
우리는 그 이상의 것이 필요하다.
구글에서 61,800개의 용어가 이 "Sofrware craftsmanship"을 설명하는데 사용되고 있으나, 그 중 극히 일부만이 누군가의 커리어를 안내할 수 있는 것이다.
슬프게도, 이러한 기사의 대부분은 거기에 숨어있는 뭉치의 개념들이 있다는 것을 잘 아는 프로그래머들에게 쓰여졌으나, 그것을 의미있게 추출하는 것에는 실패했다.

*Pete McBreen*\의 책 *Software Craftsmanship*\은 선언을 소프트웨어 개발에 접근법으로 놓고, 소프트웨어 개발을 엔지니어링 수련이나 과학이라는 확신 아래서 행동하지 않는 사람들을 겨냥한다. 하지만 *McBreen*\의 영감을 불러일으키는 작업은 결함이 있다. 소프트웨어 장인정신을 요즘 실행될 수 있는 방법과 그가 실행했을 방법을 구분하지 않았다.
또한 그는 그의 전망과 중세에 언급되는 기술들을 동시에 비밀스러운 그룹 너머에 보여지는 고도의 기술적인 산업이라는 점으로 분명히 분리하지 않았다.
그는 소프트웨어 장인정신을 소프트웨어 엔지니어링의 반대의 의미로 기술하고, 독자들에게 둘 중하나를 선택하도록 하는 실수를 했다.
우리는 **that craft model**\이 그것을 가치있게 느끼고, 소프트웨어 엔지니어링의 수련법을 만드려는 사람들을 배재하는 것이 아닌 긍정적인 방식으로 해석할 수 있다고 생각한다.

   - **that craft model**
      산업혁명 이전의 중세유럽의 것이로, 길드들은 마스터들을 관리하고, 마스터들은 그들의 공방에서 살며 일하는 사람들을 관리한다.
      마스터들은 공방 소유주 이며, 절대적인 권위를 가지고 있다.
      이 엄격한 조직구조에서 그들 하위의 집단은 장인들(journeymen)이다.
   - **journeymen**
      그들은 주로 장인이지만, 아직 그들이 목표하는 마스터라고 충분히 설명될 수 있는, 고도의 명작으로 여겨지는 수준의 스킬까지는 얻지 못한 사람들이다.
      그들은 방랑자이고 이는 그들은 도시와 도시를 건너며 새로운 기술을 전파하는 것을 의미한다.
      새로운 기술을 가져오는 것 뿐만 아니라, journeymen들은 숙련공들의 활동을 날마다 관찰한다.
숙련공들은 한명의 마스터 아래에서 충분히 기본기를 흡수하고 그들의 기술에 적용할 수 있을 때까지, 그것으로 장인들의 시험을 통과하기 전까지 수 년간 일할 것이다.
상상할 법하겠지만, 이것은 남용의 가능성이 높고, 불법이 아니라해도 현재 우리시간에는 실현불가능할 것일 수 있다.
우리는 이 모델을 현대사회로 끄트머리로 옮기는 실수를 반복하는 것을 원하지 않는다.
대신 우리는 현대 기술스튜디오가 이것을 흉내내는 것이 아닌 과거보다 발전된 형태를 취함으로 꿈 같이 달콤한 장인의 공방을 거부하는 것이 가능하다고 생각한다. 

우리가 Agile 개발 흐름을 통해 배운 것은, 사람들에게 오래 유지될 수 있을 법하고 변화에 대응하지 않아도 될 법한 것을 만들려고 하지 말라는 것이다.
당신이 조언한 사람들이 그 규칙을 벗어난 상황을 만났을때 그들은 길을 잃게 된다.
그러나, 만약 그 규칙에 기저에 있는 가치를 흡수한다면, 그들은 모든 상황에 대처할 수 있는 규칙을 만들어 낼 수 있을 것이다.
우리의 목표는 단순히 사람들에게 규율을 전하는 게 아니라, 새로운 컨텍스트에 대응할 수 있는 새로운 대처를 만들수 있도록 하는 것이고, 이것은 차례로 소프트웨어 기술을 진보시킬 것이다.

소프트웨어 장인정신에 대한 우리의 전망은 우리가 인터뷰한 기술력있는 개인들의 가치들의 정수이며, 또 우리가 보고 싶어하는 커뮤니티의 종류에 대한 표현이다.
이 책의 생각들은 그 전망에서 시작한다. 따라서 우리가 *software craftsmanship*\이라는 표현을 사용할 때는, 우리는 pracitce united의 커뮤니티를 이야기 하는 것이며,
아래 가치들을 포함한 것들을 이야기하는 것이다.

   - *Carol Dweck*\의 조사에 따르면, "growth mindset*\, 이는 당신이 준비가 된다면, 당신이 더 잘할 수 있고 모든 것은 개선 될 수 있다는 믿음이다. 
     그녀의 말에 따르면 *"effort is what makes you smart or talented."(Mindeset, p.16)*  그리고 실패는 대부분 다음에 다른 접근을 할때의 보상이 된다라고 한다.
     이것은 우리가 초기부터 주어진 재능 총량이 있고, 실패는 당신이 재능이 부족하다는 주장의 반대이다.
   - 당신의 세상에서 피드백에 대해 대응하고 변화할 필요가 있다. *Atul Gawande*\는 이것을 *"문제를 해결하기 위해, 당신이 하려고 하는 것에 부족함을 인식하는 것"(Better, p.257)*\을 희망하는 것이라고 표현한다.
   - 독단적이기 보다는 실용주의적이려고 하는 욕망. 이것은 이론적 순수함이나 미래적의 완벽함과 오늘 끝내려고 하는 목표 사이의 trade-off이다.
   - 부족함을 비축하는 것보다는, 아는 것을 공유하는 것이 더 낫다는 믿음. 이것은 주로 오픈소스 커뮤니티와 연결된다.
   - 잘못됨을 검증하기위해 실험하려는 욕구. 이것은 우리가 무언가를 하면, 우리는 실패한다는 것인데, 우리는 실패에서 다음 실험에 사용할 수업을 얻는다는 것이다.
     *Virginia Postrel*\이 말하듯 *"모든 개선은 더욱 개선 될 수 있고, 좋은 것은 계속 새로운 시도를 우리가 공손한 개선을 찾을 때만 얻을 수 있는 것이다. 모든 새로운 시도는 아직 더 많은 조합들과 지평 너머에 있다." (Future Enemies, p.69)*
   - 정신과학자들이 control의 내부적인 발생지라 부르는 것에 대한 기여. 이것은 외부에서 답을 기다리는 것이 아닌 우리의 운명들에 대해 조종사가 되고 책임을 지는 것을 포함한다.
   - 그룹이 아닌 개인에 대한 집중. 이것은 리더나 추종자들의 것이 아니고, 우리가 기술을 향상시키고 싶어하는 그룹속의 개인이며, 자기주장이 아니라 토론이나 논쟁에 의해 그것에 이를 수 있다는 것이다.
     우리는 모두 같은 여행을 하며, 우리는 세상이 아니라 자신의 변화를 찾고있다고 믿는다. 이것이 왜 당신의 팀이 아니라 당신 자신의 기술을 발전하는 것에 우리가 집중하는 이유이다.
   - 수용에 열려있는 자세. 우리는 기업용 제품개발, 컴퓨터과학, 소프트웨어 엔지니어링을 거절하지 않는다. 우리는 유용한 시스템은 소프트웨어 생태 전체에서 최고의 아이디어를 흡수해야 하는 것이라고 생각한다.
   - 우리는 과정에 집중하기 보다는 기술에 집중한다. 우리에게 있어서, 올바른 과정을 사용하는 것보다 높은 기술을 갖는 것이 더욱 중요하다. 이 개념은 어떤 과정이나 기술이 모두에게 성공을 가져다 줄 것이 아닌 것을 이야기한다. 이를 틍해 개선할 수 있겠지만, 우리의 기술레벨에 따른 불공정함이 언제나 존재한다.
   - *Etienne Wenger*\이 *"situated learning"*\라 부르는 것에 대한 강력한 선호. 
     이것은 소프트웨어 커뮤니티가 전하려 했던 *Expert in Earshot (초보자는 좋은 습관을 가지는 데에 어려움을 가지기 때문에 실력자를 옅볼 수 있는 거리에 있어야 한다.)*\패턴을 말한다.
     이는, 학습할 수 있는 가장 좋은 방법은 같은 목표를 쫒는 사람들과 같은 방에서 당신이 원하는 기술을 사용하며 있어야 한다는 것이다.
이 가치-시스템은 이후 본문에서 나오듯이 다른 역할, 다른 책임들에 중요성을 부상시킨다.

