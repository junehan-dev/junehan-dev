Preface
=======

   *알지 못하고, 알지 못하는 것을 모르는 이가 있다. 그는 멍청이다. 그를 피하라!*
   *알지 못하고, 알지 못하는 것을 아는 이가 있다. 그는 배우지 못한 이다. 그를 가르쳐라!*
   *알고, 알지 못한다고 생각하는 이가 있다. 그는 잠을 자고 있다. 그를 깨워라!*
   *알고, 스스로 아는 것을 아는 이가 있다. 그는 눈뜬 자다. 그를 따라라!*

   (아랍 격언, quoted by Lady *Isabel Burton (1831-1896)* in *The Life of Captain Sir Richard F.Burton*\)

Goals
-----

우리는 경험이 부족한 소프트웨어 개발자들이 가끔 마주하는 딜레마들에 해결책을 공유하기 위해 이 책을 썼다.
우리는 기술적인 딜레마에 대해 언급하지 않을 것이다.

   - 당신은 이 책에서 어떤 Java design patterns 또는 Ruby on Rails recipes를 찾지 못할 것이다.
   - 대신, 우리가 집중하는 딜레마들은 더욱 개인적인 것들이고, 당신의 motivation(동기부여)과 morale(의욕)를 걱정하는 것이다.
이 책은 당신이 전문성 있는 소프트웨어 개발 영역의 새로운 진입자로서 마주치는 힘든 결정들을 지나 갈 수 있도록 도움이 되어야 한다.

Audience
--------

이 책은 소프트웨어 개발의 맛을 본 사람들, 그리고 위대한 소프트웨어 개발자가 되기를 갈망하는 사람을 위한 책이다.
당신은 아마 web developer 또는 medical device programmer, 또는 당신은 금융조직을 위해 trading applications 개발하는 중일 수 도 있다.
아니면 아마도 당신은 막 대학이나, 고등학교를 졸업하고, software가 당신의 갈 길이라고 알고 있는 이 일지도 모른다.

비록 이 책이 새로운 진입자들을 위해 쓰여진 책이라고 하나, 경험있는 개발자들도 이 책의 content에서 이점을 취할 수 있다.
수 년간 경험이 있는 사람들도 그들이 이미 마주한 인식의 딜레마에 고개를 끄덕이고 있을 수 있고, 그리고 새로운 통찰을 찾아 왔거나 그들에게 적용할 그들이 원하는 해결책을 설명할 최소한 하나의 단어를 찾으러 왔을 수도 있다.
수 십년 혹은 그 이상의 경험이 있는 사람-특히, 그들의 커리어를 찾기 위해 투쟁하는 이들-은 진급을 위한 새로운 시각이나, 영감을 찾을 수 있을 것이다.

Process
-------

이 책에 대한 아이디어는 *Stickyminds.com*\이 Dave에게 Software Craftsmanship에 대해 문장을 부탁했던 2005년 초기에 시작됐다.
Dave는 당시 자신을 (경험있는) 수습생으로 스스로 인식했기 떄문에, 그가 작성하기에 편하다고 느끼는 주제는 apprenticeship(수습제도) 였다.
이것은 그가 이 주제에 대해서 무엇을 쓰고 싶은지 생각하게 만들었다.
그 시기 즈음에, Dave는 소프트웨어 개발자인 *Chris Morris*\가 작성한 포스트를 읽었다.
그것은 기타리스트 *Pat Metheny*\를 인용하여, pattern language를 위한 씨앗은 "being the worst."의 개념과 함께 쓰여졌다고 말했다.
이 씨앗은 Dave의 블로그에서 dave가 초기 패턴들을 정리하던 개인 위키로 발전했다.
초기의 패턴들은 Dave의 커리어에서 이 지점까지(2000-2005)에서 부터 추출되었다.

이미 알려진 이름있는 패턴을 이해하는 것은 그들이 일반적인 문제들에 대한 일반적인 해결책이 되기 전까지는 패턴이라고 불릴 수 없었다.
Dave는 3가지 조직의 동료들에게서 피드백을 찾았다.

   1. 그는 패턴들을 그의 웹사이트에서 제공하기 시작하였으며, 일반 comment forms의 피드백을 부탁했다.
   #. (주로 email로)그는 소프트웨어 개발영역의 리더들의 생각을 인터뷰하기 시작했고, 초기의 패턴들에 대해서 의견을 구했다.
   #. 가장 중요한 마지막으로, Dave는 경험이 적은 수련생들을 대상으로 그들의 최근 경험들에 비추어 패턴들을 테스트하기 위해서 인터뷰를 시작했다.
   그들이 말한 이야기들은 Dave에게 아직 발견하지 못한 새로운 패턴들을 발견하도록 했다.

이것은 이러한 apprenticeship 인터뷰중에서, Dave가 Ade를 인터뷰 했을 때의 것이다. (그리고 동의하에, Ade는 프로젝트의 공동저자로 합류하였다.)

   우리는 호주에서, 인도, 스웨덴까지 거주하고 일하는 사람들을 인터뷰했다.
   우리의 논쟁을 위한 설정들은 매우 다분화된 것이었다.

   같은 시기에, Laurent Bossavit, Daragh Farrell, Kraig Parkinson같은 사람들은 다양한 코딩dojo들, 워크샵과 부트캠프들을 시도할 만큼 용감했다.
   그리고 그들이 받은 피드백을 우리에게 전달해 주었고, 우리는 우리의 노트에 포함하기위해 최선을 다했다.

   이후 2005년에, 우리는 *Pattern Languages of Program(PLoP)* workshop의 focus group을 우리 패턴으로 운영했다.
   **PLOP**\에서 우리는 우리의 패턴들을 경험하고 피드백을 준 패턴 저자들에게 우리의 성과를 보여줄 수 있었다.

   동시에, **O'Relly Media**\의 Mary Treseler가 패턴들을 출판하는 것을 제시하였고, 계속 글을 쓰도록 권유했다.
   그녀는 편집을 도와주었으며, 2년 후에, 우리는 책을 출판하도록 동의하였다.
   그 시간동안 우리는 수많은 동료들과 email을 통해서, user groups나 발표회, 또는 점심 먹으며까지 이야기를 나누었고, 우리는 *http://apprenticeship.oreilly.com*\에서 피드백을 받는 것을 계속했다.

최종결과는 당신의 손에 달렸다. 이것은 수많은 인터뷰와, 존재하는 문학들에 대한 광범위한 조사, 정신분석학, 그리고 우리가 mastery에 대한 주제를 찾을 수 있는 그 모든 것들에 기초한 것이다.
당신이 읽을 수록, 우리를 소프트웨어 전문가, 철학자, 안무가등으로 보게 될 것이다. 우리는 모든 분야의 전문가들에게 배울 것이 많다고 믿는다.

Organization
------------

패턴은 주어진 context의 문제에 대한 해결책의 반복의 설명으로 이름지어졌다. 설명은 그들의 context에 적혀있는 해결책을 적용 할 수 있도록 깊은 이해를 독자에게 주어야 하며 또는 그 특정 패턴이 그들의 상황에 적합하지 않은지 결정할 수 있도록 해주여야 한다.

이 책은 몇 가지 거대한 챕터로 이루어져 있으며, 각각은 관련된 패턴의 조합으로 채워져 있다.
패턴들의 이름들은 captailized되어 있으며, 관련된 패턴들은 자주 언급된다.
각 챕터들은 그것의 패턴들을 함께 엮어서, 섹션이 그렇듯, 해당 테마에 대한 소개를 제공한다.
책의 소개글은 패턴 언어를 위한 stage를 가지고 있고, conclusion은 "the big picture"-regarding skill과 apprenticeship, 그리고 우리 전문성의 mastery를 살펴본다.

Pattern Form
------------

우리의 패턴 형식은 일상적인 것이 아니다. 만약 다른 책에서 패턴들을 보았다면, 우리는 여기서 뭔가 다른 것을 시도하는 것을 포착할 수 있을 것이다.
대부분의 패턴언어들과 비교하여, 우리는 추상적인 강제성들과 규칙들에 대해 해석하는 언급이나 섹션은 더 적다.
이 형식은 리뷰어들과 *PLOP* 워크숍의 확장되는 피드백에 기반하여 정해졌다. 그러한 피드백들에 기초하여, 우리는 간단한 구조가 우리의 패턴언어를 더욱 접근성있게 할 것이라 믿는다.

우리의 패턴들은 전부 아래 4가지 요소로 구성된다.

   - a context:	맥락과 분위기를 준비한다.
   - a problem:	패턴의 전체성에 의해서 해결될 문제를 구분한다.
   - a solution:	주로 한줄의 problem 정리로 시작되며 이후 패턴들의 관계와 관련 이야기들을 따라서 해결책을 적용하는 부분과 관련된 이슈의 디테일로 지평을 넓힌다.
   - a set of one or more actions:	각 패턴의 끝은 action section이다. 이는 당신이 패턴을 경험하기 위하여 즉시 할 수 있는 분명한 것들을 설명한다. 이 actions들은 예시 구현체들로 제공된다. 

각 패턴은 주어진 문제 내에서, solutions-family-set으로부터 family-of-problems까지 포함하기 위하려 한다는 것을 기억하고 있는 것은 중요하다.
패턴들은 기계적으로 적용하는 것이 아니라, 당신의 환경에 맞도록 수정가능성에 열린 상태로 만들어 졌다.
따라서 만약 패턴들이 당신의 환경에 정밀하게 맞지 않는다면, 혹은 action section의 **그 어떤 것도 적용하지 못할 법 하다면 우리가 제공하는 raw materials로부터 유용한 것을 만들 수 있는지 추론을 시도해보라.**

대부분 많은 패턴들이 관련된 패턴들이 수록된 페이지를 가리키는 "See Also" section으로 종료되는데, 이는 선형적인 독서보다는 다른 패턴들 사이를 헤집으며 깊은 공감을 줄 것이다.

Usage
-----

.. note::

   패턴 언어는 새롭고 고유한 요소로 무한한 다양성을 만들려는 사람에게 힘을 준다.
   그의 일상적인 언어가 그에게 새로운 문장을 무한히 만들어 낼 수 있는 힘을 줄 수 있듯이.

   - The timeless Way of Building, p. 167

우리의 목표는 당신이 자신만의 apprenticeship을 정의하도록 돕는 패턴언어들을 만드는 것이다.
우리는 당신의 상황을 알 가능성이 없으니, 각 패턴의 문제상황과 문맥을 고려하여 이것이 당신에게 적용되는지 살펴보아라.
패턴들은 연결된 것들이다. 따라서, 더 강력한 경험을 위해 함께 쓰일 수 있다.

예를 들어, *Find Mentors*\는 그 자체로 훌륭하고 time-tested 패턴이지만, 이것을 *Rubbing Elbows*\와 결함하면 더욱 강력하다.
반면에, *Expose Your Ignorance*\는 *Confront Your Ignorance*\와 *Retreat Into Competence* 같은 패턴을 지원하는 것에 더욱 의존하며, 따라서 좀 더 잠재적으로 사용하는 것이 요구된다.
이 모든 패턴언어들에 있어서, 과다사용하지 않도록 주의해라.
모든 패턴을 사용하기 위한 구실을 찾지 말고, 적절히 선별하여 당신의 상황에 가장 맞는 것을 결정하라.
그리고, *어차피 다 연결되어 있기 때문에, 처음부터 순차적으로 읽을 필요는 없다. 당신의 경험에 맞는 방식으로 책을 이해하고 탐구하라.*
이 책은 초기에 wiki에 작성된 것이기 때문에, 차례로 읽도록 쓰여진 것이 아니다.

물론 우리도 어떤 사람들이 앞에서 뒤로 차례로 읽는 것을 선호한다는 것을 알고 있다.
그래서 우리는 초기 챕터들에는 다른 패턴들을 언급하는 forward references를 최소화하도록 노력했다. 
어떤 사람들을 빠르게 한번 읽고, 두번째 독서에서 그 모든 것들을 연결하려고 하는 사람들도 있다. 이 접근 또한 괜찮다.

이 책은 refernce로 사용되기를 염두해둔 것이 아닌, 예술가의 source book에 가깝기 때문에, 시간을 들여 깊이 빠져도 괜찮다.
다른 책들과 마찬가지로, 처음에는 이 연결성이 명확하지 않을 수 있으나, 당신이 다시 돌아올 때마다 당신은 새로운 것을 느낄 것이다.

Using Code Examples
-------------------

만일 이 책의 code examples를 사용하는 것이 권한 밖의 일이라고 생각된다면, permissions@oreilly.com 으로 언제든 연락주길 바란다.

