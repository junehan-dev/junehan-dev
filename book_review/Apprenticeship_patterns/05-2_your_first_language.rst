Your First Language
===================

   *뇌에서 모든 불필요한 일을 더는 것과, 좋은 언급들만을 대기시켜서, 당신이 더 진보된 문제로 집중하는데에 자유를 느끼는 것,
   그리고 효과적으로 당신의 정신적 힘을 기르는 것. 기술적인 전문분야의 용어는 그들을 사용도록 훈련되지 않은 이들에게는 이해할 수 없는 것이다.
   하지만 이것을 그들이 단순히 어려워서가 아니다. 대조적으로 그들은 항상 쉽게 풀기위해 소개되어 왔다.*

      *-Alfred North Whitehead, An Introduction to Mathematics*

Context
-------

   당신은 막 시작한 상태로, 한 두가지 프로그래밍 언어에 얕은 이해를 가지고 있을 뿐이다.

Problem
-------

   당신이 당신의 직업이 동료와 같은 수준의 퀄리티의 것인 특정 언어로 작성된 해결책 전달하는 것에 달려있다고 생각하는 것.
   하지만 대조적으로 첫 직업을 가지는 것은, 당신이 특정 언어에 얼마나 *숙달*\되었는지에 달려있다.

Solution
--------

   언어를 골라라. 그것에 유연한 상태가 되라. 수 년간 이것은 당신이 문제를 해결하는 주 언어가 될 것이고, 언제든 연습하여 갈고닦아야할 기본 기술로 해라.
   이 선택을 하는 것은 도전이다. 이것은 당신 초기 커리어의 기초가 될 것이기 때문에 잘 선택해야 한다.

   만약 당신이 문제를 해결하도록 제의 받고, 그것이 프로그래밍 언어로 가능한 것이라면, 해결책이 당신의 습득을 향하도록 해라.
   만약 당신이 특정 언어를 요구하는 일자리를 구한다면, 그 언어를 사용한 장난감 프로그램을 만들어라, 오픈소스 프로젝트면 장래에 고용주가 당신의 업무를 보기 쉬워질 것이다.
   마찬가지로, 경험있는 프로그래머에게 지금 연재 민행하는 것에 대해서 질문을 구하라. 누군가 즉시 접근가능한 사람이 있다는 것은 문제가 15분 걸리는지 수 일이 걸리는 지의 차이가 있다.
   그러나, 외부인에게 전적으로 기대지 않을 것을 명심하라.

   첫 언어에 대해 경험을 늘리는 구조적인 방법은, 실질적인 문제를 해결해보려 하는 것이다.
   이것은 당신의 습득을 실제에 기초하도록 돕고, 당신에게 거대한 피드백 루프를 제공할 것이다.
   작은, 특정한 예제들로 습득하는 것은 자신의 생각의 발견을 프로그램에 적용하는데 손해가 있고 무엇보다, 그것은 직장에 가서 할 법한 일이다.
   이것을 개선하는 구조적인 방법은 피드백-루프를 가질 수 있는 기회를 찾는 것이다.
   특히, 짧은 피드백 루프를 만드는 것은 진행률을 스스로 측정하게 한다. 어떤 언어들은 피드백을 위한 좋은 도구들을 가지고 있으나, 언어에 관계없이, 실험할 샌드박스를 가질 수 있다.

   때로는 이러한 도구들*(브라우저 콘솔, 대화형 인터프리터 등)*\이 당신의 요구보다 작을 수 있다.
   *Dave*\는 그가 친숙하지 않은 API나 언어특징들을 시험해야할 때, 비어있는 자바클래스를 IDE에 열어 놓는 것을 좋아한다.

      .. code-block:: java

         public class	Main {
         	public static void main(String[] args) throws Exception
         	{
         		System.out.println(/*play with stuff here*/);
         	}
         }

   당신이 실제로 코드를 작성할 수 있을 정도로 충분이 학습이 되었다면, 테스트주도-개발 기술들은 당신을 조금 작은 단위에 집중 할 수 있게 해주며, 당신의 예상을 확신시켜준다.
   TDD의 유명세 덕에, 아마 테스팅 프레임웤이 없는 언어를 찾기가 어려울 것이다.
   언어에 대한 이해를 감지하고, 당신이 테스팅 프레임웤에 친숙해지기 위해 작은 테스트를 쓰는 것을 주저하지 말라.

미칠듯한 정도로 작은 보폭으로 시작하라
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

   당신이 더 배울 수록 당신의 보폭 또한 그에 맞춰 커질 것이다.
   예를 들어 Ruby는 당신이 코드 블록을 리스트의 모든 요소에 적용하고, 결과를 새로운 리스트에 수집할 수 있다.
   당신은 이 기능을 당신의 이해에 맞추려 아래와 같이 작성 할 수 있다.

      .. code-block:: ruby

         require "test/unit"
         
         class LearningTest < Test::Unit::TestCase
         	def test_my_understanding_of_blocks_and_procs
         		original = [1, 2, 3]
         		expected = [2, 3, 4]
         		p = Proc.new { |n| n + 1 }
         		assert_equal expected, original.map(&p)
         	end
         end
   당신은 학습용 테스트를 사용하는 것을 언어 습득용으로 사용할 필요는 없다.
   당신은 이 프로세스를 어떻게 다른 사람들의 라이브러리가 동작하는 것인지 배우는데에 적용할 수 있다.
   잘 구성된 시스템들에서, 테스트들은 라이브러리 기능의 구현 변화가 원래 목적을 수행하는지 확인하는데 사용되기도 한다.

   결국, 당신은 언어 구조와 API를 이해하기 위한 것이 아니라, 태스트 작성을 배우는 것에서, 실제 코드를 체크하기 위해 테스트를 쓰는 것으로 변할 것이다.
   당신은 거기에 컴퓨터로 당신의 구현체를 확인하고, 마찬가지로 당신의 동료들과 소통하는 많은 테크닉들이 간단한 단위 테스트 너머에 있다는 것을 알게 될 것이다.
   이후의 *"Learning to think differently by learning new language"*\라는 토론이며, *Ralph Johnson (Design patterns의 공동저자)*\의 조언으로, 첫 언어에도 적용되는 것이다.

   **Ralph Johson On Learning A Language**

      - Q: 그래서 누군가 다르게 생각하기 위해 배우기를 원한다고 가정해 봅시다. 어떤 것을 다루는 게 좋을까요? 루비, 파이썬, 스몰토크?
      - A: 저는 스몰토크를 선호합니다. 하지만 제가 무엇을 선호하는지는 상관없습니다. 당신은 둥신 주변에 있는 사람에 기초해서 언어를 선택해야 합니다.
        당신은 누군가 이 언어 중 하나의 팬인 사람을 알고 있나요? 그 사람에 대해서 얘기해줄 수 있나요? 혹은 그와 프로젝트를 할 수 있겠습니까?
        이제까지 언어를 배우는 가장 좋은 방법은 전문가와 함께 일하는 것이 었습니다. 당신은 그 인맥에 기반하여 언어를 택해야 합니다. 

        *독학해서 언어를 배우는 것도 가능합니다. 하지만 이는 당신이 전문가들과 소통하지 않는다면, 꽤 오랜시간을 들여 언어의 정수를 습득 할 수 있겠지요.*

   첫 언어는 당신이 다른 언어를 배우는 프레임웤이 될 것입니다.
   첫 언어를 잘 알 수록, 다음 언어를 배우는 것도 쉬울 것입니다.
   *Eric Merritt*\의 포스트인 *"The Shape of Your Mind"*\는 어떻게 프로그래밍 언어가 당신의 문제 해결기술에 심오한 영향을 주는지 말합니다.

